cont
`pg_dump get_back_test > myfile.sql &`
cont
Rails.root
cont
`/usr/local/bin/pg_dump > spec/dummy/tmp/sql_test.sql`
`touch spec/dummy/tmp/sql_test.sql`
`pwd`
`touch tmp/sql_test.sql`
`/usr/local/bin/pg_dump > tmp/sql_test.sql`
exit
`#{dump_to_file(file)}`
exit
`psql`
`pwd`
exit
system("/usr/local/bin/pg_dump","get_back_test")
cont
`/usr/local/bin/pg_dump get_back_test`
AppDb
ActiveRecord::Base.connection.execute("select foo from test")
ActiveRecord::Base.connection.execute("select * from test").each(&:p)
ActiveRecord::Base.connection.execute("select * from test")
ActiveRecord::Base.connection.execute("select * from test")[1]
ActiveRecord::Base.connection.execute("select * from test")[0]
ActiveRecord::Base.connection.execute("select * from test").first
ActiveRecord::Base.connection.execute("select * from test").first.foo
ActiveRecord::Base.connection.execute("select * from test").first["foo"]
ActiveRecord::Base.connection.execute("select * from test")
Rails.env
cont
`psql`
psql
exit
%x[pg_dump get_back_test]
cont
`/usr/local/bin/pg_dump  get_back_test`
cont
`/usr/local/bin/pg_dump --quote-all-identifiers --clean --blobs get_back_test`
exit
`/usr/local/bin/pg_dump --quote-all-identifiers --clean --blobs get_back_test`
cont
`/usr/local/bin/pg_dump get_back_test`
`which pg_dump`
`which psql`
`pwd`
contents = `/usr/local/bin/pg_dump --quote-all-identifiers --clean --blobs get_back_test`
`/usr/local/bin/pg_dump --quote-all-identifiers --clean --blobs get_back_test`
exit
`pg_dump get_back_test`
cont
`/usr/local/bin/pg_dump get_back_test`
exit
`/usr/local/bin/pg_dump --quote_all_identifiers --clean --blobs get_back_test`
dump_contents
system(dump_contents)
`#{dump_contents}`
dump_contents
cont
db_config
pg_dump
system(dump_contents)
`#{dump_contents}`
dump_contents
exit
dump_contents
cont
next
eval 'ActiveRecord::Base.connection.create_table :test do |t|; t.column :foo, :string; end'
eval "ActiveRecord::Base.connection.create_table :test do |t|; t.column :foo, :string; end"
ActiveRecord::Base.connection.execute("DROP TABLE IF EXISTS test")
cont
ActiveRecord::Base.connection.create_table :test
ActiveRecord::Base.connection.add_column :test, :foo, :string
ActiveRecord::Base.connection.execute("drop table if exists test")
ActiveRecord::Base.connection.execute("drop table if exists test;")
cont
ActiveRecord::Base.connection.execute("drop table if exists test;")
ActiveRecord::Base.connection.execute("drop table if exists test")
ActiveRecord::Base.connection.create_table :test
cont
ActiveRecord::Base.connection.execute("insert into test (foo) values ('bar')")
ActiveRecord::Base.connection.execute("insert into test ('foo') values ('bar')")
ActiveRecord::Base.connection.execute("insert into test (foo) values ('bar')")
ActiveRecord::Base.connection.execute("insert into test (foo) values ('bar');")
ActiveRecord::Base.connection.execute("insert into test (foo) values ('bar')")
ActiveRecord::Base.connection.execute('insert into test (foo) values ("bar")')
ActiveRecord::Base.connection.add_column :test, :foo, :string
ActiveRecord::Base.connection.create_table :test
ActiveRecord::Base.connection.create_table :test do |t| /
ActiveRecord::Base.connection.create_table :test do |t| \
ActiveRecord::Base.connection.create_table :test do |t|
ActiveRecord::Base.connection.create_table( :test,{ |t| t.column( :foo, :string)})
ActiveRecord::Base.connection.create_table :test,{ |t| t.column( :foo, :string)}
ActiveRecord::Base.connection.create_table :test do |t| t.column( :foo, :string); end
ActiveRecord::Base.connection.create_table :test do |t| t.column :foo, :string; end
ActiveRecord::Base.connection.create_table :test, {|t| t.column :foo, :string}
ActiveRecord::Base.connection.execute("drop table if exists test")
exit
ActiveRecord::Base.connection.execute("drop table if exists test")
ActiveRecord::Base.connection.execute("drop table if exists test;")
cont
ActiveRecord::Base.connection.execute("select * from test").first[0]
ActiveRecord::Base.connection.execute("select * from test").first["foo"]
ActiveRecord::Base.connection.execute("select * from test").first
ActiveRecord::Base.connection.execute("select * from test")
cont
`#{sql_restore}` -
filename
sql_restore
cont
`cat /Users/lesnightingill/Code/get_back/spec/dummy/tmp/sql_test.sql`
cat `/Users/lesnightingill/Code/get_back/spec/dummy/tmp/sql_test.sql`
File.exists? "/Users/lesnightingill/Code/get_back/spec/dummy/tmp/sql_test.sql"
File.exists? "/Users/lesnightingill/Code/get_back/spec/dummy/tmp/"
File.exists? "/Users/lesnightingill/Code/get_back/spec/dummy/sql_test.sql"
File.exists? "/Users/lesnightingill"
File.exists? "/Users/"
File.exists? /Users/
File.exists /Users/
system("/usr/local/bin/psql --dbname=get_back_test --host=localhost -e 'source /Users/lesnightingill/Code/get_back/spec/dummy/sql_test.sql'")
system("/usr/local/bin/psql --dbname=get_back_test --host=localhost -e source '/Users/lesnightingill/Code/get_back/spec/dummy/sql_test.sql'")
system("/usr/local/bin/psql --dbname=get_back_test --host=localhost -e 'source /Users/lesnightingill/Code/get_back/spec/dummy/sql_test.sql'")
system("/usr/local/bin/psql --dbname=get_back_test --host=localhost -e \"source /Users/lesnightingill/Code/get_back/spec/dummy/sql_test\.sql\"")
system("/usr/local/bin/psql --dbname=get_back_test --host=localhost -e \"source /Users/lesnightingill/Code/get_back/spec/dummy/sql_test.sql\"")
system("/usr/local/bin/psql --dbname=get_back_test --host=localhost -e \"source /Users/lesnightingill/Code/get_back/spec/dummy/sql_test.sql")
`which psql`
system("--dbname=get_back_test --host=localhost -e \"source /Users/lesnightingill/Code/get_back/spec/dummy/sql_test.sql")
backfile.filename
cont
db_config
cont
File.exists?(filename)
filename
"#{sql_restore}"
"#{sql_restore}
cont
File.read(file)
exit
Dir.glob(Rails.root.join(GetBack::Engine::SharedFilesDirectory,'uploads','*'))
Dir.glob(GetBack::Engine::SharedFilesDirectory,'uploads','*')
Dir.new(GetBack::Engine::SharedFilesDirectory).join('uploads')
Dir.new(GetBack::Engine::SharedFilesDirectory)
Dir(GetBack::Engine::SharedFilesDirectory)
Dir.glob(GetBack::Engine::SharedFilesDirectory,'uploads','*')
Dir.glob(Rails.root.join(GetBack::Engine::SharedFilesDirectory,'uploads','*'))
Dir.glob(Rails.root.join(GetBack::Engine::SharedFilesDirectory,'uploads'))
Dir.entries(Rails.root.join(GetBack::Engine::SharedFilesDirectory,'uploads'))
Dir.entries(GetBack::Engine::SharedFilesDirectory)
exit
FileUtils.rm(Dir.glob(Rails.root.join(GetBack::Engine::SharedFilesDirectory,"uploads","*.*")))
cont
`rm #{(Rails.root.join(GetBack::Engine::SharedFilesDirectory,"uploads","*.*"))}`
File.exists?(Rails.root.join(GetBack::Engine::SharedFilesDirectory,"uploads","boo_bar_baz.doc"))
cont
File.exists?(Rails.root.join(GetBack::Engine::SharedFilesDirectory,"uploads","boo_bar_baz.doc"))
File.exists?(Rails.root.join(GetBack::Engine::SharedFilesDirectory,"uploads"))
File.exists?(Rails.root.join(GetBack::Engine::SharedFilesDirectory,"uploads","*.*"))
FileUtils.rm(Rails.root.join(GetBack::Engine::SharedFilesDirectory,"uploads","*.*"))
