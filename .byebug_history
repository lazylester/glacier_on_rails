cont
exit
cont
conty
cony
con
cont
exit
cont
`psql get_back_test`
psql
psql get_back_test
psql get_back_db
exit
filepath
system("pg_dump -w -Fp --clean get_back_test > #{filepath} 2>&1")
cont
ActiveRecord::Base.connection.execute(File.read(file))
cont
ActiveRecord::Base.connection.execute("create table test\;")
ActiveRecord::Base.connection.execute("create table test;")
ActiveRecord::Base.connection.execute("create table test")
ActiveRecord::Base.connection.execute('create table test')
ActiveRecord::Base.connection.execute('create table test;')
ActiveRecord::Base.connection.execute("create table test)
ActiveRecord::Base.connection.execute("create table test\;")
ActiveRecord::Base.connection.execute("create table test")
ActiveRecord::Base.connection.execute("create table test;")
system({"f"=>file},psql,db_config["database"])
system "#{psql} #{db_config['database']} --file=#{file} 2>&1"
exit
system "#{psql} #{db_config['database']} --file=#{file} 2>&1"
exit
exi
system "#{psql} #{db_config['database']}"
system "#{psql} #{db_config['database']} -f #{file} 2>&1"
file
system "#{psql} #{db_config['database']}"
$?.exitstatus
system "#{psql} #{db_config['database']}", "< #{file} 2>&1"
system "#{psql} #{db_config['database']}", "< #{#{file} 2>&1}"
system "#{psql} #{db_config['database']} #{< #{file} 2>&1}"
system "#{psql} #{db_config['database']}", "#{< #{file} 2>&1}"
system "#{psql} #{db_config['database']}", < #{file} 2>&1"
system psql, "#{db_config['database']} < #{file} 2>&1"
cont
puts `#{psql} #{db_config['database']} < #{file} 2>&1`
cont
puts system("#{psql} #{db_config['database']} < #{file} 2>&1")
file
db_config['database']
psql
cont
`pwd`
puts `pwd`
puts `ls -al`
exit
puts system( "/usr/local/bin/psql get_back_test < /Users/lesnightingill/Code/get_back/spec/dummy/tmp/aws/test.sql")
exit
system "/usr/local/bin/psql get_back_test < /Users/lesnightingill/Code/get_back/spec/dummy/tmp/aws/test.sql"
exit
system("/usr/local/bin/psql get_back_test < /Users/lesnightingill/Code/get_back/spec/dummy/tmp/aws/test.sql")
system("/usr/local/bin/psql get_back_test /Users/lesnightingill/Code/get_back/spec/dummy/tmp/aws/test.sql")
File.exists?("/Users/lesnightingill/Code/get_back/spec/dummy/tmp/aws/test.sql")
File.exists?("/Users/lesnightingill/Code/get_back/spec/dummy/tmp/aws/")
File.exists?("/Users/lesnightingill/Code/get_back/spec/")
File.exists?("/Users/lesnightingill/Code/get_back/")
File.exists?("/Users/lesnightingill/Code/")
File.exists?("/Users/lesnightingill/")
File.exists?("/Users")
system("/usr/local/bin/psql get_back_test /Users/lesnightingill/Code/get_back/spec/dummy/tmp/aws/test.sql")
file
db_config['database']
psql
exit
system("/usr/local/bin/psql get_back_test < #{file}")
db_config['database']
system("/usr/local/bin/psql apf_test < #{file}")
`/usr/local/bin/psql apf_test < #{file}`
cont
exit
cont
`psql apf_test`
psql apf_test
cont
psql
db_config['database']
cont
File.read(file)
file
cont
file
cont
file
db_config['database']
pg_restore
system("#{pg_restore} --clean #{db_config['database']} #{file}")
system("#{psql} #{db_config['database']} < #{file}")
file
$?.exitstatus
cont
`cat spec/dummy/tmp/aws/2017_05_20_05_24_02.gz`
`cat spec/dummy/tmp/aws/`
`ls spec/dummy/tmp/aws/`
file.path
file
cont
file
`ls  spec/dummy/tmp/aws/`
cont
`ls  spec/dummy/tmp/aws/`
`ls -al spec/dummy/tmp/aws/`
`pwd`
`ls -al tmp/aws/`
file.path
cont
::Dir\(file.path\)
::Dir(file.path)
file
::Dir(file)
::Dir
Dir(file)
file.dir
Dir(file.path)
file.path
system("ls -al")
cont
file.read
cont
file.read
cont
file
cont
system("gzip --name #{file.path}")
file.path
file
cont
system("gzip --name #{file.path}")
file.path
file.to_s
file
cont
system("gzip --name #{file}")
cont
`gzip #{file}`
system("gzip #{file}")
cont
require 'zip'
require 'zip/zip'
require 'zip'
require 'zip
::ZIP
::Zip
Zip
::.::Zip
require 'zip'
require 'zip
::Zip
Zip
cont
File.open(file, 'r').read
file.read
file
cont
system("gzip -q #{file}")
cont
system("gzip -N #{file}")
cont
system("gzip #{file}")
cont
@glacier_archive.local_filepath
@glacier_archive.local_file
@glacier_archive
cont
@glacier_archive
cont
@glacier_archive
cont
ActiveRecord::Base.connection.execute("select * from test").first["foo"]
ActiveRecord::Base.connection.execute("select * from test").first
ActiveRecord::Base.connection.execute("select * from test")
cont
ActiveRecord::Base.connection.execute("select * from test").count
ActiveRecord::Base.connection.execute("select * from test").length
ActiveRecord::Base.connection.execute("select * from test").each{|p| p p }
ActiveRecord::Base.connection.execute("select * from test")
cont
local_filepath
cont
job_id
GlacierArchive.first
glacier_archive
cont
@glacier_archive
cont
glacier_archive.notification
glacier_archive
cont
GlacierArchive.first
GlacierArchive.count
json_message["JobId"]
json_message = JSON.parse(message)
JSON.parse(message)
message = JSON.parse(request.raw_post)["Message"]
JSON.parse(request.raw_post)["Message"]
JSON.parse(request.raw_post)["JobId"]
JSON.parse(request.raw_post)
request.raw_post
cont
request.headers
cont
routes.to_h.values[2]
routes.to_h.values[1].name
routes.to_h.values[0].name
routes.to_h.values[0].class.name
routes.to_h.values[0]
routes.to_h.values
routes.to_h
routes[1]
routes[0]
routes
cont
routes[0][1].name
routes[1][1].name
routes[1][1].path
routes[0][1].path
routes[0][1].name
routes[0][1].public_methods(false)
routes[0][1].to_s
routes[0][1].class.name
routes[0][1]
routes[0][0]
routes[0].length
routes[0].class.name
routes[0].public_methods(false)
routes[0].public_methods
routes[0]
routes.length
routes
cont
constraints
name
cont
route.dispatcher?
name
cont
constraints
name
cont
next
options
cont
post :create, :body => data
GetBack::Engine.routes.url_helpers.aws_subscription_notify_path
GetBack::Engine.routes.url_helpers.aws_subscriptions_notify_path
GetBack::Engine.routes.url_helpers
