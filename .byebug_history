cont
@glacier_archive.local_filepath
@glacier_archive.local_file
@glacier_archive
cont
@glacier_archive
cont
@glacier_archive
cont
ActiveRecord::Base.connection.execute("select * from test").first["foo"]
ActiveRecord::Base.connection.execute("select * from test").first
ActiveRecord::Base.connection.execute("select * from test")
cont
ActiveRecord::Base.connection.execute("select * from test").count
ActiveRecord::Base.connection.execute("select * from test").length
ActiveRecord::Base.connection.execute("select * from test").each{|p| p p }
ActiveRecord::Base.connection.execute("select * from test")
cont
local_filepath
cont
job_id
GlacierArchive.first
glacier_archive
cont
@glacier_archive
cont
glacier_archive.notification
glacier_archive
cont
GlacierArchive.first
GlacierArchive.count
json_message["JobId"]
json_message = JSON.parse(message)
JSON.parse(message)
message = JSON.parse(request.raw_post)["Message"]
JSON.parse(request.raw_post)["Message"]
JSON.parse(request.raw_post)["JobId"]
JSON.parse(request.raw_post)
request.raw_post
cont
request.headers
cont
routes.to_h.values[2]
routes.to_h.values[1].name
routes.to_h.values[0].name
routes.to_h.values[0].class.name
routes.to_h.values[0]
routes.to_h.values
routes.to_h
routes[1]
routes[0]
routes
cont
routes[0][1].name
routes[1][1].name
routes[1][1].path
routes[0][1].path
routes[0][1].name
routes[0][1].public_methods(false)
routes[0][1].to_s
routes[0][1].class.name
routes[0][1]
routes[0][0]
routes[0].length
routes[0].class.name
routes[0].public_methods(false)
routes[0].public_methods
routes[0]
routes.length
routes
cont
constraints
name
cont
route.dispatcher?
name
cont
constraints
name
cont
next
options
cont
post :create, :body => data
GetBack::Engine.routes.url_helpers.aws_subscription_notify_path
GetBack::Engine.routes.url_helpers.aws_subscriptions_notify_path
GetBack::Engine.routes.url_helpers
GetBack::Engine.routes
ActionController
post :create, :body => data
cont
ActionDispatch::Routing.public_methods(false).sort
ActionDispatch::Routing.public_methods(false)
ActionDispatch::Routing.route_set
cont
post :create, :body => data
ActionDispatch::Routing::Routes
ActionDispatch::Routing.routes
ActionDispatch::Routing
cont
@request.env
response = post(action, params)
params
action
cont
post :create, :params => data
cont
post :create, :params => data
cont
post :create, :params => {:bish => "bosh"}
post :create, :params => JSON.parse(data)
post :create, data
cont
t
post :create, :params => {"Type":"Notification"}
post :create, :params => {"Type":"Notification'}
JSON.parse(data)
post :create, :params => { "widget": "foo"}
post :create, :params => '{ "widget": "foo"}'
post :create, :params => data
  headers = { "CONTENT_TYPE" => "application/json" }
data
post :create, :params => data
post :create, :params => {:locale => :en}
post :create, {:locale => :en}
post :create, {:location => :en}
post :create, {:location => :en}, {:data => data}
post :create, {:location => :en}, :data => data
post :create, :location => :en, :data => data
post :create, :data => data
post :action => :create, :controller => 'get_back/aws_sns_subscriptions', :data => data
post :action => :create, :controller => 'aws_sns_subscriptions', :data => data
post :action => :create, :controller => 'get_back/aws_sns_subscriptions', :data => data
post :action => :create, :controller => 'get_back/aws_sns_subscriptions", :data => data
post :create, :data => data
post :create, data
cont
GetBack::Engine.routes.url_helpers.aws_subscription_notify_url(:host => "http://localhost:3000")
GetBack::Engine.routes.url_helpers.aws_subscription_notify_path(:host => "http://localhost:3000")
cont
GetBack::Engine.routes.url_helpers.aws_subscription_notify_url(:host => "http://localhost:3000")
GetBack::Engine.routes.url_helpers.aws_subscription_notify_url(:host => "http://www.foo.bar")
GetBack::Engine.routes.url_helpers.aws_subscription_notify_url(:host => :localhost)
GetBack::Engine.routes.url_helpers.aws_subscription_notify_url
GetBack::Engine.routes.url_helpers.aws_subscription_notify_path
GetBack::Engine.routes.url_helpers.public_methods(false).grep(/path/)
GetBack::Engine.routes.url_helpers.public_methods(false)
GetBack::Engine.routes.url_helpers
cont
`curl -H "Content-Type: application/json" -X POST -d '#{data}' http://0.0.0.0:3000#{GetBack::Engine.routes.url_helpers.aws_subscription_notify_path}`
`curl -H "Content-Type: application/json" -X POST -d '#{data}' http://localhost:3000#{GetBack::Engine.routes.url_helpers.aws_subscription_notify_path}`
`curl -H "Content-Type: application/json" -X POST -d '#{data}' http://0.0.0.0:3000#{GetBack::Engine.routes.url_helpers.aws_subscription_notify_path}`
`curl -H "Content-Type: application/json"; -X POST -d '#{data}' http://0.0.0.0:3000#{GetBack::Engine.routes.url_helpers.aws_subscription_notify_path}`
`curl -H "Content-Type: application/json" -X POST -d '#{data}' http://0.0.0.0:3000#{GetBack::Engine.routes.url_helpers.aws_subscription_notify_path}`
cont
`tail -n 80 spec/dummy/log/test.log`
`curl -H "Content-Type: application/json" -X POST -d '#{data}' http://localhost:3000#{GetBack::Engine.routes.url_helpers.aws_subscription_notify_path}`
`curl -H "Content-Type: application/json" -X POST -d #{data} http://localhost:3000#{GetBack::Engine.routes.url_helpers.aws_subscription_notify_path}`
`curl -H "Content-Type: application/json" -X POST -d #{data} http://0.0.0.0:3000#{GetBack::Engine.routes.url_helpers.aws_subscription_notify_path}`
cont
man curl
`curl localhost:3000/get_back/aws_subscription_notify -d #{data}`
GetBack::Engine.routes.url_helpers.aws_subscription_notify_path
`curl localhost:3000#{GetBack::Engine.routes.url_helpers.aws_subscription_notify_path} -d #{data}`
GetBack::Engine.routes.url_helpers.aws_subscription_notify_path
data
cont
GetBack::Engine.routes.url_helpers.aws_subscription_notify_path
GetBack::Engine.routes.url_helpers.public_methods(false)
GetBack::Engine.routes
GetBack.engine.routes
Rails.application.routes.url_helpers.get_back_path
Rails.application.routes.url_helpers.get_back_url
Rails.application.routes.url_helpers.public_methods(false)
Rails.application.routes.url_helpers.aws_subscription_notify_path
Rails.application.routes.url_helpers['aws_subscription_notify_path']
Rails.application.routes.url_helpers
Rails.application.routes
Rails
cont
clean_up_filesystem
cont
get_vault_list_request
cont
get_vault_list_request
get_vault_list
cont
self
cont
upload_response
cont
resp = AwsBackend.new.create_db_archive
archive
cont
archive
cont
get_vault_list_request
cont
get_vault_list_request
cont
get_vault_list_request
cont
get_vault_list_request
cont
get_vault_list_request
cont
con
cont
get_vault_list_request
cont
checksum(archive_contents)
list
archive_contents
cont
Rails.root
system("pwd")
cont
vault_list_info
cont
vault_list_info
cont
vault_list_info
cont
backtrace
vault_list_info
cont
Time.parse("2015-04-07T00:26:19.028Z")
Time.parse("2015-04-06T21:23:45.708Z")
cont
vault_list_info
cont
vault_list
cont
`pg_dump get_back_test > myfile.sql &`
cont
Rails.root
cont
`/usr/local/bin/pg_dump > spec/dummy/tmp/sql_test.sql`
`touch spec/dummy/tmp/sql_test.sql`
`pwd`
`touch tmp/sql_test.sql`
`/usr/local/bin/pg_dump > tmp/sql_test.sql`
exit
`#{dump_to_file(file)}`
exit
`psql`
`pwd`
exit
system("/usr/local/bin/pg_dump","get_back_test")
cont
`/usr/local/bin/pg_dump get_back_test`
AppDb
ActiveRecord::Base.connection.execute("select foo from test")
ActiveRecord::Base.connection.execute("select * from test").each(&:p)
ActiveRecord::Base.connection.execute("select * from test")
ActiveRecord::Base.connection.execute("select * from test")[1]
