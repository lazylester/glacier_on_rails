%h2 AWS Glacier Archives
%table#application_data_backups
  - if application_data_backups.empty?
    %p None have been created
  - else
    = render :partial => 'get_back/aws_archive_retrieval_jobs/application_data_backup', :collection => application_data_backups, :as => :application_data_backup

%p.action_link#backup_now{:onclick => 'backup_now()'} backup now

:coffeescript
  @backup_now = ->
    url = "#{get_back.aws_create_archive_path}"
    $.ajax
      method : 'post'
      url : url
      success : add
  add = (data, status, jqxhr)->
    $('#application_data_backups').append(data)
  @initiate_retrieval = (id)->
    $('#application_data_backups').load("#{get_back.aws_archive_retrieval_job_create_path}", {application_data_backup_id : id})
  @fetch_archive = (id)->
    url = "#{get_back.aws_fetch_archive_path}"
    data = {application_data_backup_id : id}
    context = $(event.target).closest('tr')
    $.ajax
      method : 'post'
      url : url
      data : data
      context : $(event.target).closest('tr')
      success : update
  update = (data, status, jqxhr)->
    @replaceWith(data)
  @restore = (id)->
    url = "#{get_back.aws_restore_archive_path}"
    $.ajax
      method : 'post'
      url : url
      data : {application_data_backup_id : id}
      context : $(event.target).closest('tr')
      success : restore_success #jquery handles js for error response
  restore_success = (data, status, jqxhr)->
    @replaceWith(data)
    backup_date = $(data).find('.date').text()
    flash.confirm('Database restored with the '+backup_date+' backup')
  @delete_archive = (id)->
    url = "#{get_back.aws_destroy_archive_path}"
    context = $(event.target).closest('tr')
    $.ajax
      method : 'delete'
      url : url
      data : {application_data_backup_id : id}
      context : context
      success : remove_archive
  remove_archive = ->
    @remove()
